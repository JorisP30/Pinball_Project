-------------------------------------------------------------------------------
-- Title      : TOP DEBUG
-- Project    : 
-------------------------------------------------------------------------------
-- File       : top_debug.vhd
-- Author     :   <JorisP@DESKTOP-LO58CMN>
-- Company    : 
-- Created    : 2020-02-16
-- Last update: 2020-02-16
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: TOP DEBUG FILE for TERASIC DE0 NANO board
-------------------------------------------------------------------------------
-- Copyright (c) 2020 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2020-02-16  1.0      JorisP  Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

library lib_uart;
use lib_uart.pkg_uart.all;

entity top_debug is

  port (
    clk       : in std_logic;           -- System Clock
    rst_n     : in std_logic;           -- Asynchronous reset
    i_rx_uart : in std_logic);          -- Input RX UART LINK

end entity top_debug;

architecture behv of top_debug is

  -- COMPONENTS
  component w_ram_manager is
    generic (
      G_ADDR_WIDTH : integer := 8;      -- ADDR RAM WIDTH
      G_DATA_WIDTH : integer := 8);     -- DATA RAM WIDTH

    port (
      clk          : in  std_logic;     -- Clock
      rst_n        : in  std_logic;     -- Asynchronous reset
      i_data_valid : in  std_logic;     -- DATA valid
      i_data       : in  std_logic_vector(G_DATA_WIDTH - 1 downto 0);  -- Input data
      o_addr       : out std_logic_vector(G_ADDR_WIDTH - 1 downto 0);  -- ADDR to write on the RAM
      o_data       : out std_logic_vector(G_DATA_WIDTH - 1 downto 0);  -- Data to write
      o_me         : out std_logic;     -- Memory Enable
      o_we         : out std_logic);    -- Write command
  end component w_ram_manager;

  component tdpram_sclk is
    generic (
      G_ADDR_WIDTH : integer := 8;      -- ADDR RAM WIDTH
      G_DATA_WIDTH : integer := 8);     -- DATA RAM WIDTH

    port (
      clk          : in  std_logic;     -- Clock
      rst_n        : in  std_logic;     -- Asynchronous reset
      i_data_valid : in  std_logic;     -- DATA valid
      i_data       : in  std_logic_vector(G_DATA_WIDTH - 1 downto 0);  -- Input data
      o_addr       : out std_logic_vector(G_ADDR_WIDTH - 1 downto 0);  -- ADDR to write on the RAM
      o_data       : out std_logic_vector(G_DATA_WIDTH - 1 downto 0);  -- Data to write
      o_me         : out std_logic;     -- Memory Enable
      o_we         : out std_logic);    -- Write command
  end component tdpram_sclk;


  -- INTERNAL SIGNALS



begin  -- architecture behv





end architecture behv;
